///////////////////////////////////////////////////////////////////////////////
//
//	DataRAM.cpp
//
///////////////////////////////////////////////////////////////////////////////
#include "DataRAM.h"

///////////////////////////////////////////////////////////////////////////////
//
//	Constructeur
//
///////////////////////////////////////////////////////////////////////////////
DataRAM::DataRAM( sc_module_name zName, const char *zDataFileName, unsigned long ulRAMSize, bool bVerbose )
:RAM(zName, zDataFileName, ulRAMSize, bVerbose)
{
}


///////////////////////////////////////////////////////////////////////////////
//
//	Destructeur
//
///////////////////////////////////////////////////////////////////////////////
DataRAM::~DataRAM()
{
}


///////////////////////////////////////////////////////////////////////////////
//
//	Read
//
///////////////////////////////////////////////////////////////////////////////
unsigned int DataRAM::Read(unsigned int uiAddr)
{
	// On appele la classe parent
	return RAM::Read(uiAddr);
}

	
///////////////////////////////////////////////////////////////////////////////
//
//	Write
//
///////////////////////////////////////////////////////////////////////////////
void DataRAM::Write(unsigned int uiAddr, unsigned int uiData)
{		
	if ( uiAddr >= m_ulRAMSize )
	{
		cout << "Ecriture hors de la plage de la RAM" << endl;
		
		// Fin de la simulation
		sc_stop();
	}
	else
	{			
	// On copie le contenu de la mémoire
	//	memcpy( (void*)((unsigned int)(m_ptrRAM) + uiAddr), &uiData, 4);
	memcpy( (void*)((long)(m_ptrRAM) + uiAddr), &uiData, 4);
	}
}


///////////////////////////////////////////////////////////////////////////////
//
//	end_of_simulation
//
///////////////////////////////////////////////////////////////////////////////
void DataRAM::end_of_simulation()
{
	// Variable
	FILE * pFile;
	unsigned long ulSize;
	
	// Ouverture du fichier de sortie
	pFile = fopen( this->name() , "wb" );
	
	// Validation de l'ouverture du fichier
	if (pFile == 0)
		cout << "Erreur lors de l'ouverture du fichier de sortie" << endl;
	else
	{
		// �criture
		ulSize = fwrite(m_ptrRAM , 1 , m_ulRAMSize , pFile );
		
		if ( m_ulRAMSize != ulSize )
			cout << "La RAM n'a pas �t� toute sauvegard�e dans le fichier de sortie" << endl;
		
		// Fermeture du fichier
		fclose(pFile);
	}
}
